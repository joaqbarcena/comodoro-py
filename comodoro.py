#!/usr/bin/env python2

#sudo pip install requests
#sudo pip install firebase-admin
import requests
import datetime
import firebase_admin
import time
from firebase_admin import credentials
from firebase_admin import messaging

#PATH to your certificate generated by Google Firebase console
CERTIFICATE_FIREBASE="/path/to/your/google.json"

#Your host ip/domain to check
HOST="somehost.you.have"
PORT="8888"

#if your healthservice has a path, here
PATH="/HealthService"

#URL
SERVER_TO_CHECK="http://"+HOST+":"+PORT+PATH

#Topic to fire the alert in firebase
topic = 'server_status'

#Min time to fire an alert through firebase in seconds (i.e. 30 mins = 1800 secs)
mint = 1800 

def parse_time(mdate):
    return int(datetime.datetime.strptime(mdate, '%Y-%m-%d %H:%M:%S').strftime('%s'))

def log(a,b,c,d,e,f):
    logf = open("log","a+")
    logf.write("%s : [Status  %s %s %s %s %s %s]\n" % (datetime.datetime.now(),a,b,c,d,e,f))
    logf.close()

def exc(e):
    logf = open("log","a+")
    logf.write("%s : [Exception : %s]\n" % (datetime.datetime.now(),e)) 
    logf.close()


#Conditions to check from the response in your server
cond1_ok = False 
cond2_ok = False
cond3_ok = False 
cond4_ok = False 

#General result
ok = False

now = int(time.time())
try:
    last = open("last","r")
    lass = int(last.read())
except:
    lass = 0

try:
    res = requests.get(SERVER_TO_CHECK)
    if res.status_code >= 200 and res.status_code < 300 :
        jres = res.json()
        #Example
        dt = parse_time(jres["cond1"]) + (3 * 60)
        cond1_ok = (dt > now)
        cond2_ok = jres["cond2"] > 0 
        cond3_ok = jres["cond3"] > 0 
        cond4_ok = jres["cond4"] > 0 
        ok = cond1_ok and cond2_ok and cond3_ok and cond4_ok #Can add all the conditions that we want
    log(res.status_code, activos_ok, equipos_ok, qty_ok, timer_ok, last_ok)
except e:
    log(e)
    pass


if not ok and (now - mint) > lass :
    cred = credentials.Certificate(CERTIFICATE_FIREBASE)
    firebase_admin.initialize_app(cred)
    # See documentation on defining a message payload.
    message = messaging.Message(
         notification=messaging.Notification(
            title='Server on ' + HOST,
            body='Something went wrong !!',
        ),
        android=messaging.AndroidConfig(
            priority='high',
            notification=messaging.AndroidNotification(
                sound='default'
            ),
        ),
        topic=topic,
    )
    # Send a message to the devices subscribed to the provided topic.
    response = messaging.send(message)
    # Response is a message ID string.
    print('Successfully sent message:', response)
    last = open("last","w")
    last.write(str(now))
    last.close()
